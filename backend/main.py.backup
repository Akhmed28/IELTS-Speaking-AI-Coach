from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Any
import random
from datetime import datetime, timedelta
import json

# Import our custom modules
import models
import schemas
import security
import crud
import ai_services
from database import engine, Base, get_db
from mail_services import send_verification_email, send_password_reset_email


async def create_db_and_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

app = FastAPI(
    title="IELTS Practice AI API",
    description="API to support the IELTS Speaking practice mobile application."
)

@app.on_event("startup")
async def on_startup():
    await create_db_and_tables()


# --- Authentication and Registration Endpoints ---

@app.post("/register", status_code=status.HTTP_201_CREATED, response_model=schemas.MessageResponse)
async def register_user(
    user: schemas.UserCreate,
    db: AsyncSession = Depends(get_db)
):
    db_user = await crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User with this email already exists",
        )

    verification_code = str(random.randint(100000, 999999))
    try:
        await send_verification_email(email_to=user.email, code=verification_code)
    except Exception as e:
        print(f"Email sending failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to send verification email. Please check the address or try again later.",
        )

    await crud.create_user(db=db, user=user, verification_code=verification_code)

    return {"message": "User successfully registered. A verification code has been sent to your email."}

@app.post("/verify", response_model=schemas.Token)
async def verify_user_account(request: schemas.VerificationRequest, db: AsyncSession = Depends(get_db)):
    user = await crud.verify_user_code(db, email=request.email, code=request.code)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid email or verification code.",
        )
    access_token = security.create_access_token(data={"sub": user.email})
    return schemas.Token(access_token=access_token, token_type="bearer")

# --- MODIFIED LOGIN ENDPOINT ---
@app.post("/token", response_model=schemas.Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    # NEW: Better validation for empty fields
    error_messages = []
    if not form_data.username:
        error_messages.append("Email field cannot be empty.")
    if not form_data.password:
        error_messages.append("Password field cannot be empty.")
    
    if error_messages:
        detail_string = " ".join(error_messages)
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=detail_string
        )

    # Step 1: Check if the user exists
    user = await crud.get_user_by_email(db, email=form_data.username)

    # Step 2: If user does not exist, return the specific error
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="This account is not registered.",
        )

    # Step 3: If user exists, THEN check the password
    if not security.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect password.",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # Step 4: Check if the account has been verified
    if not user.is_verified:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Account is not verified. Please check your email.",
        )

    # Step 5: If everything is correct, create and return the token
    access_token = security.create_access_token(data={"sub": user.email})
    return {"access_token": access_token, "token_type": "bearer"}

# --- User Endpoints ---

@app.get("/users/me", response_model=schemas.User)
async def read_users_me(current_user: models.User = Depends(crud.get_current_active_user)):
    return current_user

@app.delete("/users/me", response_model=schemas.MessageResponse)
async def delete_user_account(
    current_user: models.User = Depends(crud.get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    await crud.delete_current_user(db, current_user)
    return {"message": "Account deleted successfully"}

# --- IELTS Practice Endpoint ---

@app.post("/practice/final-feedback", response_model=schemas.FeedbackResponse)
async def get_final_feedback(
    payload: schemas.ConversationPayload,
    current_user: models.User = Depends(crud.get_current_active_user)
):
    if not payload.conversation:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Conversation history cannot be empty."
        )
    feedback_data = await ai_services.get_ai_final_feedback(payload.conversation)
    return schemas.FeedbackResponse(**feedback_data)

# --- Root Endpoint for Testing ---
@app.get("/")
def read_root():
    return {"message": "IELTS Practice AI Server is running!"}

@app.post("/send-reset-code", response_model=schemas.MessageResponse)
async def send_reset_code(request: schemas.ResetPasswordRequest, db: AsyncSession = Depends(get_db)):
    user = await crud.get_user_by_email(db, email=request.email)
    if user:
        reset_code = str(random.randint(100000, 999999))
        user.verification_code = reset_code
        user.code_expires_at = datetime.utcnow() + timedelta(minutes=15)
        await db.commit()
        try:
            await send_password_reset_email(email_to=user.email, code=reset_code)
        except Exception as e:
            print(f"Email sending failed: {e}")
            # Even if email fails, we don't want to leak that the user exists.
            # The frontend message is generic.
            pass
    return {"message": "If this email is registered, a password reset code has been sent."}

@app.post("/reset-password", response_model=schemas.MessageResponse)
async def reset_password(request: schemas.PasswordReset, db: AsyncSession = Depends(get_db)):
    user = await crud.verify_password_reset_code(db, email=request.email, code=request.code)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid or expired reset code.",
        )
    
    await crud.reset_user_password(db=db, user=user, new_password=request.new_password)
    
    return {"message": "Your password has been successfully reset."}

@app.post("/conversations", response_model=schemas.ConversationRead)
async def save_conversation(
    payload: schemas.ConversationCreate,
    current_user: models.User = Depends(crud.get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    convo = await crud.create_conversation(db, user_id=current_user.id, conversation=payload.conversation)
    return schemas.ConversationRead(
        id=convo.id,
        conversation=json.loads(convo.conversation_data),
        created_at=convo.created_at
    )

@app.get("/conversations", response_model=List[schemas.ConversationRead])
async def list_conversations(
    current_user: models.User = Depends(crud.get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    convos = await crud.get_user_conversations(db, user_id=current_user.id)
    return [
        schemas.ConversationRead(
            id=convo.id,
            conversation=json.loads(convo.conversation_data),
            created_at=convo.created_at
        ) for convo in convos
    ]

@app.delete("/conversations/{conversation_id}", response_model=schemas.MessageResponse)
async def delete_conversation(
    conversation_id: int,
    current_user: models.User = Depends(crud.get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    return await crud.delete_conversation(db, user_id=current_user.id, conversation_id=conversation_id)

@app.put("/users/me/password", response_model=schemas.MessageResponse)
async def change_current_user_password(
    form_data: schemas.PasswordChangeRequest,
    current_user: models.User = Depends(crud.get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    await crud.update_user_password(
        db=db, user=current_user, form_data=form_data
    )
    return {"message": "Password updated successfully"}